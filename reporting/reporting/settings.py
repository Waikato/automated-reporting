"""
Django settings for reporting project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '5)!dc%xc6622p!!wa54qaf+$_8v5a29ax04+$b)nc8x@-jtu$_'

# custom debug settings?
try:
    import reporting.settings_debug
    DEBUG = reporting.settings_debug.DEBUG
    print("Using debug settings from 'settings_debug.py'")
except ImportError:
    DEBUG = False
    print("""
        Using default debug settings (ie debugging turned off)

        Create 'settings_debug.py' for custom settings, e.g. for turning debugging on:
        DEBUG = True

        SECURITY WARNING: don't run with debug turned on in production!
        """)

ALLOWED_HOSTS = [
    '*'
]

# authentication

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Application definition

INSTALLED_APPS = [
    'database',
    'leave',
    'lpp',
    'reporting',
    'supervisors',
    'hyperlinkgrades',
    'django_python3_ldap',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'maintenance_mode',
]

APPS_LIST = [
    'leave',
    'hyperlinkgrades',
    'lpp',
    'supervisors',
]

APPS_SHORT = {
    'leave': 'Leave',
    'hyperlinkgrades': 'Hyperlink Grades',
    'lpp': 'LPP',
    'supervisors': 'Supervisors',
}

APPS_LONG = {
    'leave': 'Annual Leave',
    'hyperlinkgrades': 'Hyperlink Grades',
    'lpp': 'Low performing pass-rates',
    'supervisors': 'Supervisor Register',
}

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'maintenance_mode.middleware.MaintenanceModeMiddleware',
]

ROOT_URLCONF = 'reporting.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            'reporting/templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'maintenance_mode.context_processors.maintenance_mode',
            ],
            'debug': True,
        },
    },
]


MAINTENANCE_MODE_IGNORE_URLS = [
    "/$",
    "/database/*",
    "/hyperlinkgrades/*",
]


# only use TemporaryFileUploadHandler for file uploads
FILE_UPLOAD_HANDLERS = (
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
)

WSGI_APPLICATION = 'reporting.wsgi.application'

# Redirect to home URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = '/'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
try:
    import reporting.settings_db
    DATABASES = reporting.settings_db.DATABASES
    print("Using database settings from 'settings_db.py'")
except ImportError:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
    print("""
        Using default database settings
        Create 'settings_db.py' for custom settings, e.g.:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': 'db_name',
                'USER': 'db_user',
                'PASSWORD': 'db_user_password',
                'HOST': '',
                'PORT': 'db_port_number',
            }
        }
        """)


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Pacific/Auckland'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    'reporting/static/',
]

# general options
# NB: this gets added to the context of templates
REPORTING_OPTIONS = {
    'supervisor.only_phd': True,
}

# using local users by default
LOCAL_USERS = True

# LDAP settings
try:
    import reporting.settings_ldap
    print("Using settings from 'settings_ldap.py'")
    AUTHENTICATION_BACKENDS = reporting.settings_ldap.AUTHENTICATION_BACKENDS
    LDAP_AUTH_URL = reporting.settings_ldap.LDAP_AUTH_URL
    LDAP_AUTH_USE_TLS = reporting.settings_ldap.LDAP_AUTH_USE_TLS
    LDAP_AUTH_CONNECTION_USERNAME = reporting.settings_ldap.LDAP_AUTH_CONNECTION_USERNAME
    LDAP_AUTH_CONNECTION_PASSWORD = reporting.settings_ldap.LDAP_AUTH_CONNECTION_PASSWORD
    LDAP_AUTH_SEARCH_BASE = reporting.settings_ldap.LDAP_AUTH_SEARCH_BASE
    LOGGING = reporting.settings_ldap.LOGGING
    LOCAL_USERS = False
except ImportError:
    print("""
        No LDAP settings defined!
        Create 'settings_ldap.py' for custom settings, see details:"
        https://github.com/etianen/django-python3-ldap

        For example:

        AUTHENTICATION_BACKENDS = [
            'django_python3_ldap.auth.LDAPBackend',
        ]

        LDAP_AUTH_URL = "ldaps://server.example.com:636"
        LDAP_AUTH_USE_TLS = False
        LDAP_AUTH_CONNECTION_USERNAME = None
        LDAP_AUTH_CONNECTION_PASSWORD = None
        LDAP_AUTH_SEARCH_BASE = "ou=Active,ou=People,dc=example,dc=com"
        LOGGING = {
            "version": 1,
            "disable_existing_loggers": False,
            "handlers": {
                "console": {
                    "class": "logging.StreamHandler",
                },
            },
            "loggers": {
                "django_python3_ldap": {
                    "handlers": ["console"],
                    "level": "INFO",
                },
            },
        }
        """)

# Java settings
try:
    import reporting.settings_java
    print("Using settings from 'settings_java.py'")
    JAVA = reporting.settings_java.JAVA
except ImportError:
    print("""
        Using default Java settings
        Create 'settings_java.py' for custom settings, e.g.:"
        JAVA = "/usr/bin/java"
        """)
    JAVA = "/usr/bin/java"

# Perl settings
try:
    import reporting.settings_perl
    print("Using settings from 'settings_perl.py'")
    PERL = reporting.settings_perl.PERL
except ImportError:
    print("""
        Using default Perl settings
        Create 'settings_perl.py' for custom settings, e.g.:"
        PERL = "/usr/bin/perl"
        """)
    PERL = "/usr/bin/perl"

# LPP settings
try:
    import reporting.settings_lpp
    print("Using settings from 'settings_lpp.py'")
    LPP_SCRIPT = reporting.settings_lpp.LPP_SCRIPT
except ImportError:
    print("""
        Using default LPP settings
        Create 'settings_lpp.py' for custom settings, e.g.:"
        LPP_SCRIPT = "/usr/local/bin/LPP/pass-rates"
        """)
    LPP_SCRIPT = "/usr/local/bin/LPP/pass-rates"

# FCMS doc modifier settings
try:
    import reporting.settings_docmod
    print("Using settings from 'settings_docmod.py'")
    DOC_MOD_LIB = reporting.settings_docmod.DOC_MOD_LIB
except ImportError:
    print("""
        Using default FCMS doc modifier settings
        Create 'settings_docmod.py' for custom settings, e.g.:"
        DOC_MOD_LIB = "/usr/local/bin/fcms-doc-modifier/lib"
        """)
    DOC_MOD_LIB = "/usr/local/bin/fcms-doc-modifier/lib"
